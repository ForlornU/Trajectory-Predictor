//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""pActionMap"",
            ""id"": ""76acbe3a-fb8c-4fe7-ad68-2e861a575141"",
            ""actions"": [
                {
                    ""name"": ""MouseLook"",
                    ""type"": ""Value"",
                    ""id"": ""bcecdc6d-85a9-496c-b9be-f41ab2246e57"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""6da358a4-eb10-4a84-8e1c-d1be3ab7e0c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a49bd39f-b5b1-404f-a47f-c547d4852f46"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""pControlScheme"",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3bc6539-3d57-4a0b-a2e0-537c96c20566"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""pControlScheme"",
            ""bindingGroup"": ""pControlScheme"",
            ""devices"": []
        }
    ]
}");
        // pActionMap
        m_pActionMap = asset.FindActionMap("pActionMap", throwIfNotFound: true);
        m_pActionMap_MouseLook = m_pActionMap.FindAction("MouseLook", throwIfNotFound: true);
        m_pActionMap_Fire = m_pActionMap.FindAction("Fire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // pActionMap
    private readonly InputActionMap m_pActionMap;
    private IPActionMapActions m_PActionMapActionsCallbackInterface;
    private readonly InputAction m_pActionMap_MouseLook;
    private readonly InputAction m_pActionMap_Fire;
    public struct PActionMapActions
    {
        private @PlayerInputActions m_Wrapper;
        public PActionMapActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseLook => m_Wrapper.m_pActionMap_MouseLook;
        public InputAction @Fire => m_Wrapper.m_pActionMap_Fire;
        public InputActionMap Get() { return m_Wrapper.m_pActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IPActionMapActions instance)
        {
            if (m_Wrapper.m_PActionMapActionsCallbackInterface != null)
            {
                @MouseLook.started -= m_Wrapper.m_PActionMapActionsCallbackInterface.OnMouseLook;
                @MouseLook.performed -= m_Wrapper.m_PActionMapActionsCallbackInterface.OnMouseLook;
                @MouseLook.canceled -= m_Wrapper.m_PActionMapActionsCallbackInterface.OnMouseLook;
                @Fire.started -= m_Wrapper.m_PActionMapActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_PActionMapActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_PActionMapActionsCallbackInterface.OnFire;
            }
            m_Wrapper.m_PActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseLook.started += instance.OnMouseLook;
                @MouseLook.performed += instance.OnMouseLook;
                @MouseLook.canceled += instance.OnMouseLook;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
            }
        }
    }
    public PActionMapActions @pActionMap => new PActionMapActions(this);
    private int m_pControlSchemeSchemeIndex = -1;
    public InputControlScheme pControlSchemeScheme
    {
        get
        {
            if (m_pControlSchemeSchemeIndex == -1) m_pControlSchemeSchemeIndex = asset.FindControlSchemeIndex("pControlScheme");
            return asset.controlSchemes[m_pControlSchemeSchemeIndex];
        }
    }
    public interface IPActionMapActions
    {
        void OnMouseLook(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
}
